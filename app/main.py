from fastapi import FastAPI, Header, HTTPException, Depends, Response
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import uvicorn
from fastapi.security import OAuth2PasswordRequestForm

from sqlalchemy import create_engine
from app.database import Base, engine, get_db
from sqlalchemy.orm import Session

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
try:
    from app import models
    User = models.User
    Movie = models.Movie
    Hall = models.Hall
    Session = models.Session
    Ticket = models.Ticket
    Cinema = models.Cinema
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π: {e}")

from app.models import UserRole, MovieGenre

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI
app = FastAPI(
    title="üé¨ Cinema Paradise API",
    description="API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–æ–º",
    version="1.0.0"
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í production —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
Base.metadata.create_all(bind=engine)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î
def init_db():
    db = next(get_db())
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã
        Base.metadata.create_all(bind=engine)
        
        if db.query(User).first() is None:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            admin = User(username="admin", email="admin@cinema.com", hashed_password="admin123", first_name="Admin", last_name="User", role=UserRole.ADMIN)
            manager = User(username="manager", email="manager@cinema.com", hashed_password="manager123", first_name="Manager", last_name="User", role=UserRole.MANAGER)
            user = User(username="user", email="user@cinema.com", hashed_password="user123", first_name="Regular", last_name="User", role=UserRole.CUSTOMER)
            db.add(admin)
            db.add(manager)
            db.add(user)
            db.commit()
            print("–¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        else:
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        
        if db.query(Movie).first() is None:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å–º—ã
            movie1 = Movie(title="–ê–≤–∞—Ç–∞—Ä: –ü—É—Ç—å –≤–æ–¥—ã", duration_minutes=192, rating=8.5, genre=MovieGenre.SCI_FI)
            movie2 = Movie(title="–¢–æ–ø –ì–∞–Ω: –ú—ç–≤–µ—Ä–∏–∫", duration_minutes=130, rating=8.8, genre=MovieGenre.ACTION)
            movie3 = Movie(title="–ß—ë—Ä–Ω–∞—è –ø–∞–Ω—Ç–µ—Ä–∞: –í–∞–∫–∞–Ω–¥–∞ –Ω–∞–≤–µ–∫–∏", duration_minutes=161, rating=7.2, genre=MovieGenre.ACTION)
            db.add(movie1)
            db.add(movie2)
            db.add(movie3)
            db.commit()
            print("–¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∏–ª—å–º—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        else:
            print("–§–∏–ª—å–º—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        
        if db.query(Cinema).first() is None:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä
            cinema = Cinema(name="Cinema Paradise", address="—É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, 123", city="–ú–æ—Å–∫–≤–∞")
            db.add(cinema)
            db.commit()
            print("–¢–µ—Å—Ç–æ–≤—ã–π –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä –¥–æ–±–∞–≤–ª–µ–Ω")
        else:
            print("–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        if db.query(Hall).first() is None:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ª—ã
            cinema = db.query(Cinema).first()
            hall1 = Hall(cinema_id=cinema.id, name="–ó–∞–ª ‚Ññ1", hall_number=1, total_seats=100, rows=10, seats_per_row=10)
            hall2 = Hall(cinema_id=cinema.id, name="–ó–∞–ª ‚Ññ2", hall_number=2, total_seats=80, rows=8, seats_per_row=10)
            db.add(hall1)
            db.add(hall2)
            db.commit()
            print("–¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        else:
            print("–ó–∞–ª—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        
        if db.query(Session).first() is None:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∞–Ω—Å—ã
            from datetime import datetime
            session1 = Session(movie_id=1, hall_id=1, start_time=datetime(2024, 1, 15, 14, 0), end_time=datetime(2024, 1, 15, 17, 12), date=datetime(2024, 1, 15), base_price=450, available_seats=100)
            session2 = Session(movie_id=2, hall_id=2, start_time=datetime(2024, 1, 15, 16, 30), end_time=datetime(2024, 1, 15, 18, 40), date=datetime(2024, 1, 15), base_price=400, available_seats=80)
            session3 = Session(movie_id=3, hall_id=1, start_time=datetime(2024, 1, 15, 19, 0), end_time=datetime(2024, 1, 15, 21, 41), date=datetime(2024, 1, 15), base_price=420, available_seats=100)
            db.add(session1)
            db.add(session2)
            db.add(session3)
            db.commit()
            print("–¢–µ—Å—Ç–æ–≤—ã–µ —Å–µ–∞–Ω—Å—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        else:
            print("–°–µ–∞–Ω—Å—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        
        if db.query(Ticket).first() is None:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –±–∏–ª–µ—Ç—ã
            from datetime import datetime
            ticket1 = Ticket(user_id=1, session_id=1, seat_row=2, seat_number=5, price=450, final_price=450, status="booked", booking_reference="REF1", is_paid=True, booking_time=datetime(2024, 1, 15, 10, 30))
            ticket2 = Ticket(user_id=3, session_id=2, seat_row=3, seat_number=3, price=400, final_price=400, status="booked", booking_reference="REF2", is_paid=False, booking_time=datetime(2024, 1, 15, 11, 15))
            db.add(ticket1)
            db.add(ticket2)
            db.commit()
            print("–¢–µ—Å—Ç–æ–≤—ã–µ –±–∏–ª–µ—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        else:
            print("–ë–∏–ª–µ—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        db.close()

# –í—ã–∑—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@app.on_event("startup")
async def startup_db_client():
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö
    Base.metadata.create_all(bind=engine)
    init_db()
    print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

# –ë–∞–∑–æ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
    return {
        "message": "üé¨ Cinema Paradise API",
        "status": "active",
        "version": "1.0.0",
        "docs": "/docs"
    }

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    return {
        "status": "healthy",
        "service": "Cinema Paradise API",
        "timestamp": "2024-01-15T12:00:00Z"
    }

# –î–µ–º–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
@app.get("/movies")
async def get_movies(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤"""
    movies = db.query(Movie).all()
    return [{
        "id": movie.id,
        "title": movie.title,
        "duration": movie.duration_minutes,
        "rating": movie.rating,
        "genre": movie.genre.value
    } for movie in movies]

@app.get("/sessions")
async def get_sessions(db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ–∞–Ω—Å–æ–≤"""
    sessions = db.query(Session).all()
    result = []
    for session in sessions:
        movie = db.query(Movie).filter(Movie.id == session.movie_id).first()
        hall = db.query(Hall).filter(Hall.id == session.hall_id).first()
        result.append({
            "id": session.id,
            "movie_id": session.movie_id,
            "movie": {"title": movie.title},
            "start_time": session.start_time.isoformat(),
            "price": float(session.base_price),
            "hall_id": session.hall_id,
            "hall": {"name": hall.name, "capacity": hall.total_seats},
            "available_seats": session.available_seats
        })
    return result

@app.post("/auth/login")
async def login(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db)):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É (form-data)"""
    username = form_data.username
    password = form_data.password
    user = db.query(User).filter(User.username == username).first()
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–π —Ö–µ—à –ø–∞—Ä–æ–ª—è!
    if user and user.hashed_password == password:
        token = f"demo_token_{username}"
        return {
            "access_token": token,
            "token_type": "bearer",
            "user": {
                "username": user.username,
                "role": user.role.value,
                "email": user.email
            }
        }
    else:
        return JSONResponse(
            status_code=401,
            content={"detail": "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"}
        )

@app.post("/auth/register")
async def register(user_data: dict, db: Session = Depends(get_db)):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"–î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_data}")
    username = user_data.get("username")
    email = user_data.get("email")
    password = user_data.get("password")
    first_name = user_data.get("first_name", "User")
    last_name = user_data.get("last_name", "Lastname")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if db.query(User).filter(User.username == username).first():
        return JSONResponse(
            status_code=400,
            content={"detail": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"}
        )
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    new_user = User(username=username, email=email, hashed_password=password, first_name=first_name, last_name=last_name, role=UserRole.CUSTOMER)
    db.add(new_user)
    db.commit()
    
    return {
        "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
        "username": username,
        "email": email
    }

@app.get("/auth/me")
async def get_current_user(authorization: str = Header(None), db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not authorization:
        raise HTTPException(status_code=401, detail="–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ "Bearer token"
    try:
        token = authorization.split(" ")[1] if authorization.startswith("Bearer ") else authorization
    except:
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ —Ç–æ–∫–µ–Ω–∞
    username = token.replace("demo_token_", "")
    user = db.query(User).filter(User.username == username).first()
    if user:
        return {
            "username": user.username,
            "role": user.role.value,
            "email": user.email
        }
    else:
        raise HTTPException(status_code=401, detail="–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω")

@app.get("/demo/populate")
async def populate_demo_data(db: Session = Depends(get_db)):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ"""
    init_db()
    user_count = db.query(User).count()
    return {
        "message": "–î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã",
        "movies": 3,
        "sessions": 2,
        "users": user_count
    }

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø –ë–ò–õ–ï–¢–û–í
@app.get("/tickets/my")
async def get_my_tickets(authorization: str = Header(None), db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –º–æ–∏ –±–∏–ª–µ—Ç—ã"""
    if not authorization:
        return JSONResponse(
            status_code=401,
            content={"detail": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}
        )
    
    try:
        token = authorization.split(" ")[1] if authorization.startswith("Bearer ") else authorization
    except:
        return JSONResponse(
            status_code=401,
            content={"detail": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞"}
        )
    
    username = token.replace("demo_token_", "")
    user = db.query(User).filter(User.username == username).first()
    if not user:
        return JSONResponse(
            status_code=401,
            content={"detail": "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω"}
        )
    
    tickets = db.query(Ticket).filter(Ticket.user_id == user.id).all()
    result = []
    for ticket in tickets:
        session = db.query(Session).filter(Session.id == ticket.session_id).first()
        movie = db.query(Movie).filter(Movie.id == session.movie_id).first()
        hall = db.query(Hall).filter(Hall.id == session.hall_id).first()
        result.append({
            "id": ticket.id,
            "session_id": ticket.session_id,
            "seat_numbers": [ticket.seat_number],
            "seat_number": ticket.seat_number,
            "row_number": ticket.seat_row,
            "total_price": float(ticket.final_price),
            "price": float(ticket.price),
            "user": username,
            "customer_name": username,
            "customer_email": user.email,
            "booking_time": ticket.booking_time.isoformat(),
            "status": ticket.status,
            "is_paid": ticket.is_paid,
            "is_confirmed": ticket.is_paid,
            "session": {
                "id": session.id,
                "movie": {"title": movie.title, "id": movie.id},
                "hall": {"name": hall.name, "id": hall.id},
                "start_time": session.start_time.isoformat()
            }
        })
    return result

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è username –∏–∑ —Ç–æ–∫–µ–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞, –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–æ–∫–µ–Ω)
def get_username_from_token(token: str) -> str:
    token_to_user = {
        "demo_token_admin": "admin",
        "demo_token_user": "user"
    }
    return token_to_user.get(token, "unknown_user")

@app.post("/tickets")
async def create_ticket(ticket_data: dict, authorization: str = Header(None), db: Session = Depends(get_db)):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±–∏–ª–µ—Ç (–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ) - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ü–û–î–†–û–ë–ù–û–°–¢–Ø–ú–ò"""
    print("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ /tickets")
    if not authorization:
        print("–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
        raise HTTPException(status_code=401, detail="–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    try:
        token = authorization.split(" ")[1] if authorization.startswith("Bearer ") else authorization
        print(f"–¢–æ–∫–µ–Ω –∏–∑–≤–ª–µ—á–µ–Ω: {token}")
    except:
        print("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞")
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ —Ç–æ–∫–µ–Ω–∞
    username = token.replace("demo_token_", "")
    print(f"Username –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ —Ç–æ–∫–µ–Ω–∞: {username}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    user = db.query(User).filter(User.username == username).first()
    if not user:
        print(f"–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: {username}, ID: {user.id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
    session_id = ticket_data.get("session_id")
    seat_numbers = ticket_data.get("seat_numbers", [])
    total_price = ticket_data.get("total_price")
    
    if not session_id or not seat_numbers:
        print("–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω session_id –∏–ª–∏ seat_numbers")
        raise HTTPException(status_code=400, detail="–ù–µ —É–∫–∞–∑–∞–Ω session_id –∏–ª–∏ seat_numbers")
    print(f"–î–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: session_id={session_id}, seat_numbers={seat_numbers}, total_price={total_price}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ–∞–Ω—Å–∞
    session = db.query(Session).filter(Session.id == session_id).first()
    if not session:
        print(f"–û—à–∏–±–∫–∞: –°–µ–∞–Ω—Å {session_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise HTTPException(status_code=404, detail="–°–µ–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    print(f"–°–µ–∞–Ω—Å –Ω–∞–π–¥–µ–Ω: {session_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ª
    hall = db.query(Hall).filter(Hall.id == session.hall_id).first()
    if not hall:
        print(f"–û—à–∏–±–∫–∞: –ó–∞–ª –¥–ª—è —Å–µ–∞–Ω—Å–∞ {session_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        raise HTTPException(status_code=404, detail="–ó–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    print(f"–ó–∞–ª –Ω–∞–π–¥–µ–Ω: {hall.name}, –≤—Å–µ–≥–æ –º–µ—Å—Ç: {hall.total_seats}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Å—Ç
    if session.available_seats < len(seat_numbers):
        print(f"–û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç. –î–æ—Å—Ç—É–ø–Ω–æ: {session.available_seats}, –∑–∞–ø—Ä–æ—à–µ–Ω–æ: {len(seat_numbers)}")
        raise HTTPException(status_code=400, detail=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç. –î–æ—Å—Ç—É–ø–Ω–æ: {session.available_seats}")
    print(f"–°–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ: {session.available_seats}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç—ã –ª–∏ –º–µ—Å—Ç–∞
    existing_tickets = db.query(Ticket).filter(Ticket.session_id == session_id, Ticket.seat_number.in_(seat_numbers)).all()
    if existing_tickets:
        occupied_seats = [ticket.seat_number for ticket in existing_tickets]
        print(f"–û—à–∏–±–∫–∞: –ú–µ—Å—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç—ã: {occupied_seats}")
        raise HTTPException(status_code=400, detail=f"–ú–µ—Å—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç—ã: {occupied_seats}")
    print("–í—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ —Å–≤–æ–±–æ–¥–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å–º
    movie = db.query(Movie).filter(Movie.id == session.movie_id).first()
    if movie:
        print(f"–§–∏–ª—å–º: {movie.title}, –ó–∞–ª: {hall.name}")
    
    # –°–æ–∑–¥–∞–µ–º –±–∏–ª–µ—Ç—ã
    import uuid
    tickets = []
    base_price_per_seat = float(session.base_price) / len(seat_numbers) if total_price is None else float(total_price) / len(seat_numbers)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∑–∞–ª–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Ä—è–¥–æ–≤
    seats_per_row = 10  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 –º–µ—Å—Ç –≤ —Ä—è–¥—É
    if hasattr(hall, 'seats_per_row') and hall.seats_per_row:
        seats_per_row = hall.seats_per_row
    else:
        # –í—ã—á–∏—Å–ª—è–µ–º seats_per_row –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—Ç –∏ —Ä—è–¥–æ–≤
        total_seats = hall.total_seats
        estimated_rows = max(1, int((total_seats / 10) + 0.5))  # –ü—Ä–∏–º–µ—Ä–Ω–æ 10 –º–µ—Å—Ç –≤ —Ä—è–¥—É
        seats_per_row = max(1, total_seats // estimated_rows)
    
    for seat_number in seat_numbers:
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä—è–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–º–µ—Ä–∞ –º–µ—Å—Ç–∞
        seat_row = ((seat_number - 1) // seats_per_row) + 1
        seat_in_row = ((seat_number - 1) % seats_per_row) + 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ—Å—Ç–∞ –∏ —Ü–µ–Ω—É (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        seat_type = "standard"
        seat_price = base_price_per_seat
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–µ—Å—Ç–æ VIP –∏–ª–∏ –ø—Ä–µ–º–∏—É–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—Ç (–ø—Ä–∏–º–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        if seat_number <= hall.vip_seats:
            seat_type = "vip"
            seat_price = float(session.vip_price) if session.vip_price else base_price_per_seat * 1.5
        elif seat_number <= (hall.vip_seats + hall.premium_seats):
            seat_type = "premium"
            seat_price = float(session.premium_price) if session.premium_price else base_price_per_seat * 1.2
        
        ticket = Ticket(
            user_id=user.id,
            session_id=session_id,
            seat_row=seat_row,  # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π —Ä—è–¥
            seat_number=seat_number,
            seat_type=seat_type,
            price=seat_price,
            final_price=seat_price,
            booking_reference=str(uuid.uuid4())[:8].upper(),
            status="booked",
            is_paid=False
        )
        db.add(ticket)
        tickets.append(ticket)
        print(f"–ë–∏–ª–µ—Ç —Å–æ–∑–¥–∞–Ω: —Ä—è–¥ {seat_row}, –º–µ—Å—Ç–æ {seat_number} (–≤ —Ä—è–¥—É: {seat_in_row}), —Ç–∏–ø {seat_type}, —Ü–µ–Ω–∞ {seat_price}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç –≤ —Å–µ–∞–Ω—Å–µ
    session.available_seats -= len(seat_numbers)
    session.reserved_tickets += len(seat_numbers)
    if session.available_seats == 0:
        session.is_sold_out = True
    
    db.commit()
    print(f"–°–µ–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: –¥–æ—Å—Ç—É–ø–Ω–æ –º–µ—Å—Ç {session.available_seats}, –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ –±–∏–ª–µ—Ç–æ–≤ {session.reserved_tickets}")
    
    return {
        "message": f"–ë–∏–ª–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è {username}",
        "ticket_ids": [ticket.id for ticket in tickets],
        "booking_references": [ticket.booking_reference for ticket in tickets]
    }

@app.get("/admin/users")
async def get_admin_users(authorization: str = Header(None), db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not authorization:
        raise HTTPException(status_code=401, detail="–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
    
    try:
        token = authorization.split(" ")[1] if authorization.startswith("Bearer ") else authorization
    except:
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞")
    
    username = token.replace("demo_token_", "")
    current_user = db.query(User).filter(User.username == username).first()
    if not current_user or current_user.role not in [UserRole.ADMIN, UserRole.MANAGER]:
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
    
    users = db.query(User).all()
    return [{
        "id": user.id,
        "username": user.username,
        "email": user.email,
        "role": user.role.value,
        "created_at": user.created_at.isoformat() if user.created_at else None
    } for user in users]

@app.get("/admin/tickets")
async def get_admin_tickets(authorization: str = Header(None), db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±–∏–ª–µ—Ç—ã (–¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if not authorization:
        return JSONResponse(
            status_code=401,
            content={"detail": "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}
        )
    
    try:
        token = authorization.split(" ")[1] if authorization.startswith("Bearer ") else authorization
    except:
        return JSONResponse(
            status_code=401,
            content={"detail": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞"}
        )
    
    username = token.replace("demo_token_", "")
    current_user = db.query(User).filter(User.username == username).first()
    if not current_user or current_user.role not in [UserRole.ADMIN, UserRole.MANAGER]:
        return JSONResponse(
            status_code=403,
            content={"detail": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"}
        )
    
    tickets = db.query(Ticket).all()
    result = []
    print(f"üîç –ê–¥–º–∏–Ω –∑–∞–ø—Ä–æ—Å–∏–ª –±–∏–ª–µ—Ç—ã. –ù–∞–π–¥–µ–Ω–æ: {len(tickets)} –±–∏–ª–µ—Ç–æ–≤")
    for ticket in tickets:
        session = db.query(Session).filter(Session.id == ticket.session_id).first()
        movie = db.query(Movie).filter(Movie.id == session.movie_id).first()
        hall = db.query(Hall).filter(Hall.id == session.hall_id).first()
        user = db.query(User).filter(User.id == ticket.user_id).first()
        print(f"   - –ë–∏–ª–µ—Ç #{ticket.id}: {user.username} ‚Üí {movie.title}, –º–µ—Å—Ç–æ {ticket.seat_number}")
        result.append({
            "id": ticket.id,
            "session_id": ticket.session_id,
            "seat_numbers": [ticket.seat_number],
            "seat_number": ticket.seat_number,
            "row_number": ticket.seat_row,
            "total_price": float(ticket.final_price),
            "price": float(ticket.price),
            "user": user.username,
            "customer_name": user.username,
            "customer_email": user.email,
            "booking_time": ticket.booking_time.isoformat(),
            "purchase_date": ticket.booking_time.isoformat(),
            "status": ticket.status,
            "is_paid": ticket.is_paid,
            "is_confirmed": ticket.is_paid,
            "customer_phone": user.phone or "",
            "session": {
                "id": session.id,
                "movie": {"title": movie.title, "id": movie.id},
                "hall": {"name": hall.name, "id": hall.id},
                "start_time": session.start_time.isoformat()
            },
            "movie_title": movie.title,
            "movie": {"title": movie.title, "id": movie.id},
            "hall_name": hall.name,
            "hall": {"name": hall.name, "id": hall.id},
            "start_time": session.start_time.isoformat(),
            "user_info": {
                "username": user.username,
                "email": user.email,
                "role": user.role.value
            }
        })
    return result

@app.get("/sessions/{session_id}/tickets")
async def get_tickets_for_session(session_id: int, db: Session = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ–∞–Ω—Å–∞"""
    tickets = db.query(Ticket).filter(Ticket.session_id == session_id).all()
    return [{
        "id": ticket.id,
        "seat_number": ticket.seat_number,
        "user_id": ticket.user_id,
        "price": float(ticket.price),
        "status": ticket.status,
        "is_paid": ticket.is_paid
    } for ticket in tickets]

@app.post("/admin/update_seat_rows")
async def update_seat_rows(authorization: str = Header(None), db: Session = Depends(get_db)):
    """–û–±–Ω–æ–≤–∏—Ç—å seat_row –¥–ª—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –±–∏–ª–µ—Ç–æ–≤"""
    if not authorization:
        raise HTTPException(status_code=401, detail="–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
    
    try:
        token = authorization.split(" ")[1] if authorization.startswith("Bearer ") else authorization
    except:
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞")
    
    username = token.replace("demo_token_", "")
    user = db.query(User).filter(User.username == username).first()
    if not user or user.role != UserRole.ADMIN:
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    tickets = db.query(Ticket).all()
    updated_count = 0
    for ticket in tickets:
        session = db.query(Session).filter(Session.id == ticket.session_id).first()
        if session:
            hall = db.query(Hall).filter(Hall.id == session.hall_id).first()
            if hall:
                seats_per_row = hall.seats_per_row if hall.seats_per_row else 10
                new_row = ((ticket.seat_number - 1) // seats_per_row) + 1
                if ticket.seat_row != new_row:
                    ticket.seat_row = new_row
                    updated_count += 1
    db.commit()
    return {
        "message": "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ seat_row –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
        "updated_tickets": updated_count
    }

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000) 