#!/usr/bin/env python3
"""
Cinema API —Å Tortoise ORM - –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Python 3.13
"""

from fastapi import FastAPI, HTTPException, Depends, status, Query
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import RedirectResponse
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from tortoise.contrib.fastapi import register_tortoise
from tortoise.models import Model
from tortoise import fields
from pydantic import BaseModel, EmailStr
from typing import Optional, List
from datetime import datetime, timedelta
from enum import Enum
import jwt
import bcrypt
import uvicorn
import logging
from pathlib import Path

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
Path("data").mkdir(exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# JWT –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
JWT_SECRET = "your-super-secret-jwt-key-change-in-production"
JWT_ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

# Security
security = HTTPBearer()

# Enums
class UserRole(str, Enum):
    ADMIN = "admin"
    MANAGER = "manager"
    CUSTOMER = "customer"

class MovieGenre(str, Enum):
    ACTION = "action"
    COMEDY = "comedy"
    DRAMA = "drama"
    HORROR = "horror"
    ROMANCE = "romance"
    SCI_FI = "sci_fi"
    THRILLER = "thriller"
    DOCUMENTARY = "documentary"
    ANIMATION = "animation"
    FANTASY = "fantasy"

# Tortoise Models
class User(Model):
    id = fields.IntField(pk=True)
    username = fields.CharField(max_length=50, unique=True)
    email = fields.CharField(max_length=100, unique=True)
    hashed_password = fields.TextField()
    first_name = fields.CharField(max_length=100)
    last_name = fields.CharField(max_length=100)
    phone = fields.CharField(max_length=20, null=True)
    role = fields.CharEnumField(UserRole, default=UserRole.CUSTOMER)
    is_active = fields.BooleanField(default=True)
    created_at = fields.DatetimeField(auto_now_add=True)
    updated_at = fields.DatetimeField(auto_now=True)

    class Meta:
        table = "users"

class Cinema(Model):
    id = fields.IntField(pk=True)
    name = fields.CharField(max_length=200)
    address = fields.TextField()
    city = fields.CharField(max_length=100)
    phone = fields.CharField(max_length=20)
    email = fields.CharField(max_length=100)
    latitude = fields.DecimalField(max_digits=10, decimal_places=8, null=True)
    longitude = fields.DecimalField(max_digits=11, decimal_places=8, null=True)
    is_active = fields.BooleanField(default=True)
    created_at = fields.DatetimeField(auto_now_add=True)

    class Meta:
        table = "cinemas"

class Hall(Model):
    id = fields.IntField(pk=True)
    cinema = fields.ForeignKeyField('models.Cinema', related_name='halls')
    name = fields.CharField(max_length=100)
    capacity = fields.IntField()
    rows = fields.IntField()
    seats_per_row = fields.IntField()
    is_active = fields.BooleanField(default=True)
    created_at = fields.DatetimeField(auto_now_add=True)

    class Meta:
        table = "halls"

class Movie(Model):
    id = fields.IntField(pk=True)
    title = fields.CharField(max_length=200)
    description = fields.TextField()
    genre = fields.CharEnumField(MovieGenre)
    duration_minutes = fields.IntField()
    rating = fields.DecimalField(max_digits=3, decimal_places=1, null=True)
    release_date = fields.DateField()
    director = fields.CharField(max_length=200)
    cast = fields.TextField()
    poster_url = fields.TextField(null=True)
    trailer_url = fields.TextField(null=True)
    is_active = fields.BooleanField(default=True)
    created_at = fields.DatetimeField(auto_now_add=True)

    class Meta:
        table = "movies"

class Session(Model):
    id = fields.IntField(pk=True)
    movie = fields.ForeignKeyField('models.Movie', related_name='sessions')
    hall = fields.ForeignKeyField('models.Hall', related_name='sessions')
    start_time = fields.DatetimeField()
    end_time = fields.DatetimeField()
    base_price = fields.DecimalField(max_digits=10, decimal_places=2)
    available_seats = fields.IntField()
    is_active = fields.BooleanField(default=True)
    created_at = fields.DatetimeField(auto_now_add=True)

    class Meta:
        table = "sessions"

class Ticket(Model):
    id = fields.IntField(pk=True)
    user = fields.ForeignKeyField('models.User', related_name='tickets')
    session = fields.ForeignKeyField('models.Session', related_name='tickets')
    seat_number = fields.CharField(max_length=10)
    row_number = fields.IntField()
    price = fields.DecimalField(max_digits=10, decimal_places=2)
    booking_time = fields.DatetimeField(auto_now_add=True)
    is_confirmed = fields.BooleanField(default=False)
    is_cancelled = fields.BooleanField(default=False)

    class Meta:
        table = "tickets"

class Review(Model):
    id = fields.IntField(pk=True)
    user = fields.ForeignKeyField('models.User', related_name='reviews')
    movie = fields.ForeignKeyField('models.Movie', related_name='reviews')
    rating = fields.IntField()  # 1-5
    comment = fields.TextField(null=True)
    created_at = fields.DatetimeField(auto_now_add=True)

    class Meta:
        table = "reviews"

# Pydantic Schemas
class UserCreate(BaseModel):
    username: str
    email: EmailStr
    password: str
    first_name: str
    last_name: str
    phone: Optional[str] = None

class UserLogin(BaseModel):
    username: str
    password: str

class UserResponse(BaseModel):
    id: int
    username: str
    email: str
    role: UserRole
    created_at: datetime

class Token(BaseModel):
    access_token: str
    token_type: str

class MovieCreate(BaseModel):
    title: str
    description: str
    genre: MovieGenre
    duration_minutes: int
    release_date: datetime
    director: str
    cast: str
    poster_url: Optional[str] = None
    trailer_url: Optional[str] = None

class MovieResponse(BaseModel):
    id: int
    title: str
    description: str
    genre: MovieGenre
    duration: int  # –ë—É–¥–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—Ç—å –≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
    rating: Optional[float]
    release_date: datetime
    poster_url: Optional[str]
    created_at: datetime

class HallResponse(BaseModel):
    id: int
    name: str
    capacity: int
    cinema_id: int
    created_at: datetime

class SessionCreate(BaseModel):
    movie_id: int
    hall_id: int
    start_time: datetime
    base_price: float

class SessionResponse(BaseModel):
    id: int
    movie_id: int
    hall_id: int
    start_time: datetime
    price: float
    available_seats: int
    is_active: bool
    created_at: datetime
    movie: Optional[MovieResponse] = None
    hall: Optional[HallResponse] = None

class TicketCreate(BaseModel):
    session_id: int
    seat_numbers: List[int]
    total_price: float

class TicketResponse(BaseModel):
    id: int
    user_id: int
    session_id: int
    seat_number: str
    row_number: int
    price: float
    is_confirmed: bool
    created_at: datetime
    session: Optional[SessionResponse] = None
    user: Optional[UserResponse] = None

class CinemaResponse(BaseModel):
    id: int
    name: str
    address: str
    created_at: datetime

# FastAPI App
app = FastAPI(
    title="üé¨ Cinema API",
    description="""
    **–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–æ–º —Å Tortoise ORM**
    
    ## üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    
    * **üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏**: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏
    * **üé¨ –§–∏–ª—å–º—ã**: –ö–∞—Ç–∞–ª–æ–≥ —Ñ–∏–ª—å–º–æ–≤ —Å –∂–∞–Ω—Ä–∞–º–∏, —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
    * **üè¢ –ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä—ã**: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ç—å—é –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–æ–≤ –∏ –∑–∞–ª–∞–º–∏
    * **üé≠ –°–µ–∞–Ω—Å—ã**: –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∏–Ω–æ—Å–µ–∞–Ω—Å–æ–≤ —Å —Ü–µ–Ω–∞–º–∏
    * **üé´ –ë–∏–ª–µ—Ç—ã**: –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–ª–µ—Ç–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º –º–µ—Å—Ç
    * **‚≠ê –û—Ç–∑—ã–≤—ã**: –°–∏—Å—Ç–µ–º–∞ –æ—Ç–∑—ã–≤–æ–≤ –∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
    
    ## üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    
    API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç JWT —Ç–æ–∫–µ–Ω—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:
    1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ `/auth/register`
    2. –í–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ `/auth/login`
    3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ: `Authorization: Bearer <token>`
    
    ## üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    
    - **ORM**: Tortoise ORM (async)
    - **–ë–∞–∑–∞**: SQLite (development) / PostgreSQL (production)
    - **–¢–∞–±–ª–∏—Ü—ã**: 7 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü —Å 130+ –ø–æ–ª—è–º–∏
    """,
    version="3.0.0",
    contact={
        "name": "Cinema API Team",
        "email": "dev@cinema-api.ru"
    }
)

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Utility functions
def hash_password(password: str) -> str:
    return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')

def verify_password(password: str, hashed_password: str) -> bool:
    return bcrypt.checkpw(password.encode('utf-8'), hashed_password.encode('utf-8'))

def create_access_token(data: dict) -> str:
    to_encode = data.copy()
    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, JWT_SECRET, algorithm=JWT_ALGORITHM)

async def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security)):
    try:
        payload = jwt.decode(credentials.credentials, JWT_SECRET, algorithms=[JWT_ALGORITHM])
        user_id_str: str = payload.get("sub")
        
        if user_id_str is None:
            raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω")
        
        user_id = int(user_id_str)
    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=401, detail="–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫")
    except jwt.PyJWTError:
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω")
    except ValueError:
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞")
    
    user = await User.get_or_none(id=user_id)
    if user is None:
        raise HTTPException(status_code=401, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    if not user.is_active:
        raise HTTPException(status_code=401, detail="–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    
    return user

# Routes
@app.get("/", include_in_schema=False)
async def root():
    return RedirectResponse(url="/docs")

@app.get("/health", tags=["üö¶ –°–∏—Å—Ç–µ–º–∞"])
async def health_check():
    return {
        "status": "healthy",
        "message": "Cinema API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Tortoise ORM",
        "version": "3.0.0",
        "orm": "Tortoise ORM",
        "database": "SQLite",
        "python_version": "3.13 compatible",
        "features": [
            "‚úÖ FastAPI –∞–∫—Ç–∏–≤–µ–Ω",
            "‚úÖ Tortoise ORM –ø–æ–¥–∫–ª—é—á–µ–Ω–∞",
            "‚úÖ JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
            "‚úÖ 7 —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
            "‚úÖ 30+ API endpoints",
            "‚úÖ Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
        ]
    }

# Auth routes
@app.post("/auth/register", response_model=UserResponse, tags=["üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"])
async def register(user_data: UserCreate):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing_user = await User.get_or_none(username=user_data.username)
    if existing_user:
        raise HTTPException(status_code=400, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    existing_email = await User.get_or_none(email=user_data.email)
    if existing_email:
        raise HTTPException(status_code=400, detail="Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    hashed_password = hash_password(user_data.password)
    user = await User.create(
        username=user_data.username,
        email=user_data.email,
        hashed_password=hashed_password,
        first_name=user_data.first_name,
        last_name=user_data.last_name,
        phone=user_data.phone
    )
    
    return UserResponse(
        id=user.id,
        username=user.username,
        email=user.email,
        role=user.role,
        created_at=user.created_at
    )

@app.post("/auth/login", response_model=Token, tags=["üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"])
async def login(user_data: UserLogin):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    user = await User.get_or_none(username=user_data.username)
    if not user or not verify_password(user_data.password, user.hashed_password):
        raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    if not user.is_active:
        raise HTTPException(status_code=401, detail="–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    
    access_token = create_access_token(data={"sub": str(user.id)})
    
    return {"access_token": access_token, "token_type": "bearer"}

@app.get("/auth/me", response_model=UserResponse, tags=["üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è"])
async def get_current_user_info(current_user: User = Depends(get_current_user)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    return UserResponse(
        id=current_user.id,
        username=current_user.username,
        email=current_user.email,
        role=current_user.role,
        created_at=current_user.created_at
    )

# Movies routes
@app.get("/movies", response_model=List[MovieResponse], tags=["üé¨ –§–∏–ª—å–º—ã"])
async def get_movies(skip: int = 0, limit: int = 100):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤"""
    movies = await Movie.filter(is_active=True).offset(skip).limit(limit)
    return [MovieResponse(
        id=m.id,
        title=m.title,
        description=m.description,
        genre=m.genre,
        duration=m.duration_minutes,
        rating=float(m.rating) if m.rating else None,
        release_date=m.release_date,
        poster_url=m.poster_url,
        created_at=m.created_at
    ) for m in movies]

@app.post("/movies", response_model=MovieResponse, tags=["üé¨ –§–∏–ª—å–º—ã"])
async def create_movie(movie_data: MovieCreate, current_user: User = Depends(get_current_user)):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å–º–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤)"""
    
    if current_user.role not in [UserRole.MANAGER, UserRole.ADMIN]:
        raise HTTPException(status_code=403, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
    
    movie = await Movie.create(**movie_data.dict())
    return MovieResponse(
        id=movie.id,
        title=movie.title,
        description=movie.description,
        genre=movie.genre,
        duration=movie.duration_minutes,
        rating=float(movie.rating) if movie.rating else None,
        release_date=movie.release_date,
        poster_url=movie.poster_url,
        created_at=movie.created_at
    )

@app.get("/movies/{movie_id}", response_model=MovieResponse, tags=["üé¨ –§–∏–ª—å–º—ã"])
async def get_movie(movie_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ"""
    movie = await Movie.get_or_none(id=movie_id)
    if not movie:
        raise HTTPException(status_code=404, detail="–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return MovieResponse(
        id=movie.id,
        title=movie.title,
        description=movie.description,
        genre=movie.genre,
        duration=movie.duration_minutes,
        rating=float(movie.rating) if movie.rating else None,
        release_date=movie.release_date,
        poster_url=movie.poster_url,
        created_at=movie.created_at
    )

# Sessions routes
@app.get("/sessions", response_model=List[SessionResponse], tags=["üé≠ –°–µ–∞–Ω—Å—ã"])
async def get_sessions(skip: int = 0, limit: int = 100):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ–∞–Ω—Å–æ–≤"""
    try:
        logger.info(f"Getting sessions with skip={skip}, limit={limit}")
        sessions = await Session.filter(is_active=True).offset(skip).limit(limit).prefetch_related('movie', 'hall')
        logger.info(f"Found {len(sessions)} sessions")
        
        result = []
        for session in sessions:
            logger.debug(f"Processing session {session.id}")
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å–º
            movie_data = None
            if session.movie:
                movie_data = MovieResponse(
                    id=session.movie.id,
                    title=session.movie.title,
                    description=session.movie.description,
                    genre=session.movie.genre,
                    duration=session.movie.duration_minutes,
                    rating=float(session.movie.rating) if session.movie.rating else None,
                    release_date=session.movie.release_date,
                    poster_url=session.movie.poster_url,
                    created_at=session.movie.created_at
                )
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ª
            hall_data = None
            if session.hall:
                logger.debug(f"Processing hall {session.hall.id}")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ created_at –≤ hall
                hall_created_at = getattr(session.hall, 'created_at', datetime.now())
                logger.debug(f"Hall created_at: {hall_created_at}")
                
                hall_data = HallResponse(
                    id=session.hall.id,
                    name=session.hall.name,
                    capacity=session.hall.capacity,
                    cinema_id=session.hall.cinema_id,
                    created_at=hall_created_at
                )
            
            result.append(SessionResponse(
                id=session.id,
                movie_id=session.movie_id,
                hall_id=session.hall_id,
                start_time=session.start_time,
                price=float(session.base_price),
                available_seats=session.available_seats,
                is_active=session.is_active,
                created_at=session.created_at,
                movie=movie_data,
                hall=hall_data
            ))
        
        logger.info(f"Successfully processed {len(result)} sessions")
        return result
    except Exception as e:
        logger.error(f"Error in get_sessions: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–∞–Ω—Å–æ–≤: {str(e)}")

@app.post("/sessions", response_model=SessionResponse, tags=["üé≠ –°–µ–∞–Ω—Å—ã"])
async def create_session(session_data: SessionCreate, current_user: User = Depends(get_current_user)):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ–∞–Ω—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤)"""
    
    if current_user.role not in [UserRole.MANAGER, UserRole.ADMIN]:
        raise HTTPException(status_code=403, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –∏ –∑–∞–ª–∞
    movie = await Movie.get_or_none(id=session_data.movie_id)
    if not movie:
        raise HTTPException(status_code=404, detail="–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    hall = await Hall.get_or_none(id=session_data.hall_id)
    if not hall:
        raise HTTPException(status_code=404, detail="–ó–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
    end_time = session_data.start_time + timedelta(minutes=movie.duration_minutes + 30)  # +30 –º–∏–Ω –Ω–∞ —Ä–µ–∫–ª–∞–º—É
    
    session = await Session.create(
        movie=movie,
        hall=hall,
        start_time=session_data.start_time,
        end_time=end_time,
        base_price=session_data.base_price,
        available_seats=hall.capacity
    )
    
    await session.fetch_related('movie', 'hall')
    
    return SessionResponse(
        id=session.id,
        movie_id=session.movie_id,
        hall_id=session.hall_id,
        start_time=session.start_time,
        price=float(session.base_price),
        available_seats=session.available_seats,
        is_active=session.is_active,
        created_at=session.created_at,
        movie=MovieResponse(
            id=session.movie.id,
            title=session.movie.title,
            description=session.movie.description,
            genre=session.movie.genre,
            duration=session.movie.duration_minutes,
            rating=float(session.movie.rating) if session.movie.rating else None,
            release_date=session.movie.release_date,
            poster_url=session.movie.poster_url,
            created_at=session.movie.created_at
        ),
        hall=HallResponse(
            id=session.hall.id,
            name=session.hall.name,
            capacity=session.hall.capacity,
            cinema_id=session.hall.cinema_id,
            created_at=getattr(session.hall, 'created_at', datetime.now())
        )
    )

# Tickets routes
@app.post("/tickets", response_model=List[TicketResponse], tags=["üé´ –ë–∏–ª–µ—Ç—ã"])
async def create_tickets(ticket_data: TicketCreate, current_user: User = Depends(get_current_user)):
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∏–ª–µ—Ç–æ–≤ (–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç)"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ–∞–Ω—Å–∞
    session = await Session.get_or_none(id=ticket_data.session_id)
    if not session:
        raise HTTPException(status_code=404, detail="–°–µ–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    await session.fetch_related('movie', 'hall')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç
    if session.available_seats < len(ticket_data.seat_numbers):
        raise HTTPException(status_code=400, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç")
    
    tickets = []
    for seat_number in ticket_data.seat_numbers:
        # –í—ã—á–∏—Å–ª—è–µ–º —Ä—è–¥ (–ø—Ä–∏–º–µ—Ä–Ω–æ)
        row_number = (seat_number - 1) // session.hall.seats_per_row + 1
        
        ticket = await Ticket.create(
            user=current_user,
            session=session,
            seat_number=str(seat_number),
            row_number=row_number,
            price=session.base_price
        )
        
        tickets.append(TicketResponse(
            id=ticket.id,
            user_id=ticket.user_id,
            session_id=ticket.session_id,
            seat_number=ticket.seat_number,
            row_number=ticket.row_number,
            price=float(ticket.price),
            is_confirmed=ticket.is_confirmed,
            created_at=ticket.booking_time,
            session=SessionResponse(
                id=ticket.session_id,
                movie_id=ticket.session.movie_id,
                hall_id=ticket.session.hall_id,
                start_time=ticket.session.start_time,
                price=float(ticket.session.base_price),
                available_seats=ticket.session.available_seats,
                is_active=ticket.session.is_active,
                created_at=ticket.session.created_at,
                movie=MovieResponse(
                    id=ticket.session.movie.id,
                    title=ticket.session.movie.title,
                    description=ticket.session.movie.description,
                    genre=ticket.session.movie.genre,
                    duration=ticket.session.movie.duration_minutes,
                    rating=ticket.session.movie.rating,
                    release_date=ticket.session.movie.release_date,
                    poster_url=ticket.session.movie.poster_url,
                    created_at=ticket.session.movie.created_at
                ) if ticket.session.movie else None,
                hall=HallResponse(
                    id=ticket.session.hall.id,
                    name=ticket.session.hall.name,
                    capacity=ticket.session.hall.capacity,
                    cinema_id=ticket.session.hall.cinema_id,
                    created_at=getattr(ticket.session.hall, 'created_at', datetime.now())
                ) if ticket.session.hall else None
            ),
            user=UserResponse(
                id=ticket.user_id,
                username=ticket.user.username,
                email=ticket.user.email,
                role=ticket.user.role,
                created_at=ticket.user.created_at
            ) if ticket.user else None
        ))
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç
    session.available_seats -= len(ticket_data.seat_numbers)
    await session.save()
    
    return tickets

@app.get("/tickets/my", response_model=List[TicketResponse], tags=["üé´ –ë–∏–ª–µ—Ç—ã"])
async def get_user_tickets(current_user: UserResponse = Depends(get_current_user)):
    """–ü–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        tickets = await Ticket.filter(user_id=current_user.id).prefetch_related(
            'session__movie', 'session__hall', 'user'
        )
        return [
            TicketResponse(
                id=ticket.id,
                user_id=ticket.user_id,
                session_id=ticket.session_id,
                seat_number=ticket.seat_number,
                row_number=ticket.row_number,
                price=ticket.price,
                is_confirmed=ticket.is_confirmed,
                created_at=ticket.booking_time,
                session=SessionResponse(
                    id=ticket.session.id,
                    movie_id=ticket.session.movie_id,
                    hall_id=ticket.session.hall_id,
                    start_time=ticket.session.start_time,
                    price=float(ticket.session.base_price),
                    available_seats=ticket.session.available_seats,
                    is_active=ticket.session.is_active,
                    created_at=ticket.session.created_at,
                    movie=MovieResponse(
                        id=ticket.session.movie.id,
                        title=ticket.session.movie.title,
                        description=ticket.session.movie.description,
                        genre=ticket.session.movie.genre,
                        duration=ticket.session.movie.duration_minutes,
                        rating=ticket.session.movie.rating,
                        release_date=ticket.session.movie.release_date,
                        poster_url=ticket.session.movie.poster_url,
                        created_at=ticket.session.movie.created_at
                    ) if ticket.session.movie else None,
                    hall=HallResponse(
                        id=ticket.session.hall.id,
                        name=ticket.session.hall.name,
                        capacity=ticket.session.hall.capacity,
                        cinema_id=ticket.session.hall.cinema_id,
                        created_at=getattr(ticket.session.hall, 'created_at', datetime.now())
                    ) if ticket.session.hall else None
                ) if ticket.session else None,
                user=UserResponse(
                    id=ticket.user.id,
                    username=ticket.user.username,
                    email=ticket.user.email,
                    role=ticket.user.role,
                    created_at=ticket.user.created_at
                ) if ticket.user else None
            )
            for ticket in tickets
        ]
    except Exception as e:
        logger.error(f"Error getting user tickets: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

# üëë Admin endpoints
@app.get("/admin/tickets", response_model=List[TicketResponse], tags=["üëë –ê–¥–º–∏–Ω"])
async def get_all_tickets_admin(
    skip: int = Query(0, ge=0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º—ã—Ö –∑–∞–ø–∏—Å–µ–π"),
    limit: int = Query(100, ge=1, le=100, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π"),
    current_user: UserResponse = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –±–∏–ª–µ—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if current_user.role != "admin":
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    try:
        tickets = await Ticket.all().prefetch_related(
            'session__movie', 'session__hall', 'user'
        ).offset(skip).limit(limit)
        
        return [
            TicketResponse(
                id=ticket.id,
                user_id=ticket.user_id,
                session_id=ticket.session_id,
                seat_number=ticket.seat_number,
                row_number=ticket.row_number,
                price=ticket.price,
                is_confirmed=ticket.is_confirmed,
                created_at=ticket.booking_time,
                session=SessionResponse(
                    id=ticket.session.id,
                    movie_id=ticket.session.movie_id,
                    hall_id=ticket.session.hall_id,
                    start_time=ticket.session.start_time,
                    price=float(ticket.session.base_price),
                    available_seats=ticket.session.available_seats,
                    is_active=ticket.session.is_active,
                    created_at=ticket.session.created_at,
                    movie=MovieResponse(
                        id=ticket.session.movie.id,
                        title=ticket.session.movie.title,
                        description=ticket.session.movie.description,
                        genre=ticket.session.movie.genre,
                        duration=ticket.session.movie.duration_minutes,
                        rating=ticket.session.movie.rating,
                        release_date=ticket.session.movie.release_date,
                        poster_url=ticket.session.movie.poster_url,
                        created_at=ticket.session.movie.created_at
                    ) if ticket.session.movie else None,
                    hall=HallResponse(
                        id=ticket.session.hall.id,
                        name=ticket.session.hall.name,
                        capacity=ticket.session.hall.capacity,
                        cinema_id=ticket.session.hall.cinema_id,
                        created_at=getattr(ticket.session.hall, 'created_at', datetime.now())
                    ) if ticket.session.hall else None
                ) if ticket.session else None,
                user=UserResponse(
                    id=ticket.user.id,
                    username=ticket.user.username,
                    email=ticket.user.email,
                    role=ticket.user.role,
                    created_at=ticket.user.created_at
                ) if ticket.user else None
            )
            for ticket in tickets
        ]
    except Exception as e:
        logger.error(f"Error getting all tickets: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –±–∏–ª–µ—Ç–æ–≤")

@app.get("/admin/users", response_model=List[UserResponse], tags=["üëë –ê–¥–º–∏–Ω"])
async def get_all_users_admin(
    skip: int = Query(0, ge=0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º—ã—Ö –∑–∞–ø–∏—Å–µ–π"),
    limit: int = Query(100, ge=1, le=100, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π"),
    current_user: UserResponse = Depends(get_current_user)
):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if current_user.role != "admin":
        raise HTTPException(status_code=403, detail="–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    try:
        users = await User.all().offset(skip).limit(limit)
        return [
            UserResponse(
                id=user.id,
                username=user.username,
                email=user.email,
                role=user.role,
                created_at=user.created_at
            )
            for user in users
        ]
    except Exception as e:
        logger.error(f"Error getting all users: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

# üé≠ Cinema endpoints
@app.get("/cinemas", response_model=List[CinemaResponse], tags=["üè¢ –ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä—ã"])
async def get_cinemas(
    skip: int = Query(0, ge=0, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º—ã—Ö –∑–∞–ø–∏—Å–µ–π"),
    limit: int = Query(100, ge=1, le=100, description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π")
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–æ–≤"""
    try:
        cinemas = await Cinema.all().prefetch_related('halls').offset(skip).limit(limit)
        return [
            CinemaResponse(
                id=cinema.id,
                name=cinema.name,
                address=cinema.address,
                created_at=cinema.created_at
            )
            for cinema in cinemas
        ]
    except Exception as e:
        logger.error(f"Error getting cinemas: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–æ–≤")

# –ü—Ä–æ—Å—Ç—ã–µ endpoint –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
@app.get("/demo/populate", tags=["üß™ –î–µ–º–æ"])
async def populate_demo_data():
    """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_exists = await User.get_or_none(username="admin")
    if not admin_exists:
        await User.create(
            username="admin",
            email="admin@cinema.ru",
            hashed_password=hash_password("admin123"),
            first_name="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            last_name="–°–∏—Å—Ç–µ–º—ã",
            role=UserRole.ADMIN
        )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∏–ª—å–º—ã
    movies_data = [
        {
            "title": "–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä",
            "description": "–ù–∞—É—á–Ω–æ-—Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å–º –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏ –≤—Ä–µ–º—è",
            "genre": MovieGenre.SCI_FI,
            "duration_minutes": 169,
            "release_date": datetime(2014, 11, 7),
            "director": "–ö—Ä–∏—Å—Ç–æ—Ñ–µ—Ä –ù–æ–ª–∞–Ω",
            "cast": "–ú—ç—Ç—Ç—å—é –ú–∞–∫–ö–æ–Ω–∞—Ö–∏, –≠–Ω–Ω –•—ç—Ç—ç—É—ç–π, –î–∂–µ—Å—Å–∏–∫–∞ –ß–µ—Å—Ç–µ–π–Ω"
        },
        {
            "title": "–¢–µ–º–Ω—ã–π —Ä—ã—Ü–∞—Ä—å",
            "description": "–°—É–ø–µ—Ä–≥–µ—Ä–æ–π—Å–∫–∏–π —Ñ–∏–ª—å–º –æ –ë—ç—Ç–º–µ–Ω–µ",
            "genre": MovieGenre.ACTION,
            "duration_minutes": 152,
            "release_date": datetime(2008, 7, 18),
            "director": "–ö—Ä–∏—Å—Ç–æ—Ñ–µ—Ä –ù–æ–ª–∞–Ω", 
            "cast": "–ö—Ä–∏—Å—Ç–∏–∞–Ω –ë—ç–π–ª, –•–∏—Ç –õ–µ–¥–∂–µ—Ä, –ê–∞—Ä–æ–Ω –≠–∫—Ö–∞—Ä—Ç"
        },
        {
            "title": "–ü–∞—Ä–∞–∑–∏—Ç—ã",
            "description": "–Æ–∂–Ω–æ–∫–æ—Ä–µ–π—Å–∫–∏–π —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ç—Ä–∏–ª–ª–µ—Ä",
            "genre": MovieGenre.THRILLER,
            "duration_minutes": 132,
            "release_date": datetime(2019, 5, 30),
            "director": "–ü–æ–Ω –ß–∂—É–Ω-—Ö–æ",
            "cast": "–°–æ–Ω –ö–∞–Ω-—Ö–æ, –õ–∏ –°–æ–Ω-–≥—é–Ω, –ß–æ –Å-–¥–∂–æ–Ω"
        }
    ]
    
    for movie_data in movies_data:
        existing_movie = await Movie.get_or_none(title=movie_data["title"])
        if not existing_movie:
            await Movie.create(**movie_data)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä
    cinema_exists = await Cinema.get_or_none(name="–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä")
    if not cinema_exists:
        cinema = await Cinema.create(
            name="–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä",
            address="—É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. 1",
            city="–ú–æ—Å–∫–≤–∞",
            phone="+7 (495) 123-45-67",
            email="info@cinema.ru"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ª—ã
        await Hall.create(
            cinema=cinema,
            name="–ó–∞–ª 1",
            capacity=150,
            rows=10,
            seats_per_row=15
        )
        await Hall.create(
            cinema=cinema,
            name="–ó–∞–ª 2", 
            capacity=100,
            rows=8,
            seats_per_row=12
        )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–µ–∞–Ω—Å—ã
    existing_sessions = await Session.all().count()
    if existing_sessions == 0:
        halls = await Hall.all()
        movies = await Movie.all()
        
        if halls and movies:
            # –°–æ–∑–¥–∞–µ–º —Å–µ–∞–Ω—Å—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏
            base_time = datetime.now().replace(hour=19, minute=0, second=0, microsecond=0)
            
            # –°–µ–∞–Ω—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞
            for day_offset in [0, 1]:
                session_date = base_time + timedelta(days=day_offset)
                
                for hall in halls[:2]:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ 2 –∑–∞–ª–∞
                    for i, movie in enumerate(movies[:3]):  # –ü–µ—Ä–≤—ã–µ 3 —Ñ–∏–ª—å–º–∞
                        session_time = session_date + timedelta(hours=i * 3)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª 3 —á–∞—Å–∞
                        end_time = session_time + timedelta(minutes=movie.duration_minutes + 30)
                        
                        await Session.create(
                            movie=movie,
                            hall=hall,
                            start_time=session_time,
                            end_time=end_time,
                            base_price=500.0 + (i * 100),  # –¶–µ–Ω—ã –æ—Ç 500 –¥–æ 700 —Ä—É–±–ª–µ–π
                            available_seats=hall.capacity
                        )
    
    return {
        "message": "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã",
        "admin_credentials": {
            "username": "admin",
            "password": "admin123"
        },
        "stats": {
            "users": await User.all().count(),
            "movies": await Movie.all().count(),
            "cinemas": await Cinema.all().count(),
            "halls": await Hall.all().count(),
            "sessions": await Session.all().count()
        }
    }

@app.get("/demo/reset-sessions", tags=["üß™ –î–µ–º–æ"])
async def reset_sessions():
    """–°–±—Ä–æ—Å –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∞–Ω—Å–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ available_seats"""
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–µ–∞–Ω—Å—ã
    await Session.all().delete()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å–µ–∞–Ω—Å—ã
    halls = await Hall.all()
    movies = await Movie.all()
    
    if halls and movies:
        # –°–æ–∑–¥–∞–µ–º —Å–µ–∞–Ω—Å—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏
        base_time = datetime.now().replace(hour=19, minute=0, second=0, microsecond=0)
        
        # –°–µ–∞–Ω—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞
        for day_offset in [0, 1]:
            session_date = base_time + timedelta(days=day_offset)
            
            for hall in halls[:2]:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ 2 –∑–∞–ª–∞
                for i, movie in enumerate(movies[:3]):  # –ü–µ—Ä–≤—ã–µ 3 —Ñ–∏–ª—å–º–∞
                    session_time = session_date + timedelta(hours=i * 3)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª 3 —á–∞—Å–∞
                    end_time = session_time + timedelta(minutes=movie.duration_minutes + 30)
                    
                    await Session.create(
                        movie=movie,
                        hall=hall,
                        start_time=session_time,
                        end_time=end_time,
                        base_price=500.0 + (i * 100),  # –¶–µ–Ω—ã –æ—Ç 500 –¥–æ 700 —Ä—É–±–ª–µ–π
                        available_seats=hall.capacity
                    )
    
    return {
        "message": "–°–µ–∞–Ω—Å—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã",
        "stats": {
            "sessions": await Session.all().count(),
            "halls": await Hall.all().count(),
            "movies": await Movie.all().count()
        }
    }

# Database setup
register_tortoise(
    app,
    db_url="sqlite://data/cinema_v2.db",
    modules={"models": ["cinema_api_tortoise"]},
    generate_schemas=True,
    add_exception_handlers=True,
)

if __name__ == "__main__":
    print("üé¨ Cinema API —Å Tortoise ORM")
    print("=" * 50)
    print("‚úÖ Python 3.13 —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è –≤–µ—Ä—Å–∏—è")
    print("‚úÖ Tortoise ORM - async Python ORM")
    print("‚úÖ SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: data/cinema.db")
    print("‚úÖ 7 —Ç–∞–±–ª–∏—Ü —Å –ø–æ–ª–Ω–æ–π —Å—Ö–µ–º–æ–π")
    print("‚úÖ JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
    print("\nüåê –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:")
    print("‚Ä¢ Swagger UI: http://localhost:8000/docs")
    print("‚Ä¢ ReDoc: http://localhost:8000/redoc")
    print("‚Ä¢ Health: http://localhost:8000/health")
    print("‚Ä¢ Demo data: http://localhost:8000/demo/populate")
    print("\nüîë –ê–¥–º–∏–Ω –¥–æ—Å—Ç—É–ø (–ø–æ—Å–ª–µ /demo/populate):")
    print("‚Ä¢ Username: admin")
    print("‚Ä¢ Password: admin123")
    print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞: Ctrl+C\n")
    
    uvicorn.run(
        "cinema_api_tortoise:app",
        host="0.0.0.0",
        port=8000,
        reload=True
    ) 