"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ Cinema API
–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
"""

import requests
import json
from datetime import datetime, timedelta

BASE_URL = "http://localhost:8000"

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º–æ–≤
movies_data = [
    {
        "title": "–ú–∞—Ç—Ä–∏—Ü–∞",
        "description": "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–π —Ö–∞–∫–µ—Ä —É–∑–Ω–∞–µ—Ç –æ—Ç —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–≤—Å—Ç–∞–Ω—Ü–µ–≤ –æ –Ω–∞—Å—Ç–æ—è—â–µ–π –ø—Ä–∏—Ä–æ–¥–µ —Å–≤–æ–µ–π —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏",
        "duration_minutes": 136,
        "genre": "–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞",
        "director": "–õ–∞–Ω–∞ –í–∞—á–æ–≤—Å–∫–∏, –õ–∏–ª–ª–∏ –í–∞—á–æ–≤—Å–∫–∏",
        "release_year": 1999,
        "rating": 8.7,
        "poster_url": "https://example.com/matrix.jpg"
    },
    {
        "title": "–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä",
        "description": "–ö–æ–º–∞–Ω–¥–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Ç–µ—à–µ—Å—Ç–≤—É–µ—Ç —á–µ—Ä–µ–∑ —á–µ—Ä–≤–æ—Ç–æ—á–∏–Ω—É –≤ –∫–æ—Å–º–æ—Å–µ",
        "duration_minutes": 169,
        "genre": "–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞",
        "director": "–ö—Ä–∏—Å—Ç–æ—Ñ–µ—Ä –ù–æ–ª–∞–Ω",
        "release_year": 2014,
        "rating": 8.6,
        "poster_url": "https://example.com/interstellar.jpg"
    },
    {
        "title": "–ö—Ä–∏–º–∏–Ω–∞–ª—å–Ω–æ–µ —á—Ç–∏–≤–æ",
        "description": "–ñ–∏–∑–Ω–∏ –¥–≤—É—Ö –∫–∏–ª–ª–µ—Ä–æ–≤ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è —Å –∂–∏–∑–Ω—è–º–∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–µ—Å—Ç—É–ø–Ω–∏–∫–æ–≤",
        "duration_minutes": 154,
        "genre": "–ö—Ä–∏–º–∏–Ω–∞–ª",
        "director": "–ö–≤–µ–Ω—Ç–∏–Ω –¢–∞—Ä–∞–Ω—Ç–∏–Ω–æ",
        "release_year": 1994,
        "rating": 8.9,
        "poster_url": "https://example.com/pulp_fiction.jpg"
    }
]

def create_movies():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∏–ª—å–º–æ–≤"""
    print("–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤...")
    movie_ids = []
    
    for movie in movies_data:
        response = requests.post(f"{BASE_URL}/api/v1/movies/", json=movie)
        if response.status_code == 200:
            movie_data = response.json()
            movie_ids.append(movie_data["id"])
            print(f"‚úì –°–æ–∑–¥–∞–Ω —Ñ–∏–ª—å–º: {movie['title']} (ID: {movie_data['id']})")
        else:
            print(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞ {movie['title']}: {response.text}")
    
    return movie_ids

def create_sessions(movie_ids):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ–∞–Ω—Å–æ–≤"""
    print("\n–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∞–Ω—Å–æ–≤...")
    session_ids = []
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ–∞–Ω—Å—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π
    base_date = datetime.now() + timedelta(days=1)
    
    for i, movie_id in enumerate(movie_ids):
        # –°–æ–∑–¥–∞–µ–º –ø–æ 2 —Å–µ–∞–Ω—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å–º–∞
        times = [
            (base_date.replace(hour=14, minute=0), base_date.replace(hour=16, minute=30)),
            (base_date.replace(hour=19, minute=0), base_date.replace(hour=21, minute=30))
        ]
        
        for j, (start_time, end_time) in enumerate(times):
            session_data = {
                "movie_id": movie_id,
                "start_time": start_time.isoformat(),
                "end_time": end_time.isoformat(),
                "hall_number": (i % 3) + 1,  # –ó–∞–ª—ã 1, 2, 3
                "total_seats": 50,
                "price": 350.0 + (i * 50)  # –†–∞–∑–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤
            }
            
            response = requests.post(f"{BASE_URL}/api/v1/sessions/", json=session_data)
            if response.status_code == 200:
                session_data_resp = response.json()
                session_ids.append(session_data_resp["id"])
                print(f"‚úì –°–æ–∑–¥–∞–Ω —Å–µ–∞–Ω—Å: —Ñ–∏–ª—å–º ID {movie_id}, –∑–∞–ª {session_data['hall_number']}, "
                      f"–≤—Ä–µ–º—è {start_time.strftime('%H:%M')} (ID: {session_data_resp['id']})")
            else:
                print(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–∞–Ω—Å–∞: {response.text}")
    
    return session_ids

def create_sample_tickets(session_ids):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –±–∏–ª–µ—Ç–æ–≤"""
    print("\n–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –±–∏–ª–µ—Ç–æ–≤...")
    
    sample_customers = [
        {"name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", "email": "ivan@example.com", "phone": "+7-900-123-45-67"},
        {"name": "–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞", "email": "maria@example.com", "phone": "+7-900-234-56-78"},
        {"name": "–ê–ª–µ–∫—Å–µ–π –°–∏–¥–æ—Ä–æ–≤", "email": "alexey@example.com", "phone": "+7-900-345-67-89"},
        {"name": "–ï–ª–µ–Ω–∞ –ö–æ–∑–ª–æ–≤–∞", "email": "elena@example.com", "phone": "+7-900-456-78-90"},
    ]
    
    ticket_ids = []
    
    for i, session_id in enumerate(session_ids[:4]):  # –°–æ–∑–¥–∞–µ–º –±–∏–ª–µ—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 4 —Å–µ–∞–Ω—Å–æ–≤
        customer = sample_customers[i % len(sample_customers)]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–∞–Ω—Å–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–µ–Ω—ã
        session_response = requests.get(f"{BASE_URL}/api/v1/sessions/{session_id}")
        if session_response.status_code == 200:
            session_data = session_response.json()
            
            ticket_data = {
                "session_id": session_id,
                "seat_number": (i % 10) + 1,  # –ú–µ—Å—Ç–∞ 1-10
                "customer_name": customer["name"],
                "customer_email": customer["email"],
                "customer_phone": customer["phone"],
                "price": session_data["price"]
            }
            
            response = requests.post(f"{BASE_URL}/api/v1/tickets/", json=ticket_data)
            if response.status_code == 200:
                ticket_data_resp = response.json()
                ticket_ids.append(ticket_data_resp["id"])
                print(f"‚úì –°–æ–∑–¥–∞–Ω –±–∏–ª–µ—Ç: {customer['name']}, –º–µ—Å—Ç–æ {ticket_data['seat_number']}, "
                      f"—Å–µ–∞–Ω—Å {session_id} (ID: {ticket_data_resp['id']})")
                
                # –û–ø–ª–∞—á–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–æ–π –±–∏–ª–µ—Ç
                if i % 2 == 0:
                    pay_response = requests.patch(f"{BASE_URL}/api/v1/tickets/{ticket_data_resp['id']}/pay")
                    if pay_response.status_code == 200:
                        print(f"  ‚úì –ë–∏–ª–µ—Ç {ticket_data_resp['id']} –æ–ø–ª–∞—á–µ–Ω")
            else:
                print(f"‚úó –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∏–ª–µ—Ç–∞: {response.text}")
    
    return ticket_ids

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üé¨ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Cinema API\n")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
        health_response = requests.get(f"{BASE_URL}/health")
        if health_response.status_code != 200:
            print("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
            return
        
        print("‚úÖ API –¥–æ—Å—Ç—É–ø–Ω–æ\n")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        movie_ids = create_movies()
        if movie_ids:
            session_ids = create_sessions(movie_ids)
            if session_ids:
                ticket_ids = create_sample_tickets(session_ids)
        
        print(f"\nüéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìΩ –§–∏–ª—å–º–æ–≤: {len(movie_ids)}")
        print(f"üé≠ –°–µ–∞–Ω—Å–æ–≤: {len(session_ids) if 'session_ids' in locals() else 0}")
        print(f"üé´ –ë–∏–ª–µ—Ç–æ–≤: {len(ticket_ids) if 'ticket_ids' in locals() else 0}")
        print(f"\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: {BASE_URL}/docs")
        
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main() 