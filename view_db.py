#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Cinema API
"""
import sqlite3
import json
from datetime import datetime

def connect_db(db_path='data/cinema_v2.db'):
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(db_path)
        conn.row_factory = sqlite3.Row  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–ª–æ–Ω–∫–∞–º –ø–æ –∏–º–µ–Ω–∏
        return conn
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return None

def show_tables(conn):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã"""
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' ORDER BY name;")
    tables = cursor.fetchall()
    
    print("üóÇÔ∏è  –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
    print("=" * 40)
    for table in tables:
        cursor.execute(f"SELECT COUNT(*) as count FROM {table[0]}")
        count = cursor.fetchone()[0]
        print(f"üìã {table[0]} ({count} –∑–∞–ø–∏—Å–µ–π)")
    print()

def show_table_data(conn, table_name, limit=10):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute(f"PRAGMA table_info({table_name})")
    columns = cursor.fetchall()
    
    print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã '{table_name}':")
    print("-" * 60)
    for col in columns:
        print(f"  {col[1]} ({col[2]}) {'NOT NULL' if col[3] else 'NULL'} {'PRIMARY KEY' if col[5] else ''}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    cursor.execute(f"SELECT * FROM {table_name} LIMIT {limit}")
    rows = cursor.fetchall()
    
    if rows:
        print(f"\nüì¶ –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã '{table_name}' (–ø–æ–∫–∞–∑–∞–Ω–æ {len(rows)} –∏–∑ –Ω–∏—Ö):")
        print("-" * 60)
        for i, row in enumerate(rows, 1):
            print(f"  üìù –ó–∞–ø–∏—Å—å {i}:")
            for col_name in row.keys():
                value = row[col_name]
                if value is not None and len(str(value)) > 100:
                    value = str(value)[:100] + "..."
                print(f"    {col_name}: {value}")
            print()
    else:
        print(f"\nüì≠ –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –ø—É—Å—Ç–∞")
    print()

def main():
    print("üé¨ Cinema API - –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    conn = connect_db()
    if not conn:
        return
    
    try:
        # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        show_tables(conn)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' ORDER BY name;")
        tables = cursor.fetchall()
        
        for table in tables:
            table_name = table[0]
            show_table_data(conn, table_name, limit=5)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        conn.close()

if __name__ == "__main__":
    main() 